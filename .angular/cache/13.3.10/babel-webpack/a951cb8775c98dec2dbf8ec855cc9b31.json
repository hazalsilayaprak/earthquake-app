{"ast":null,"code":"import _asyncToGenerator from \"/Users/hazalsilayaprak/Projects/earthquake-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport fs from 'fs';\nimport { BaseSource } from './basesource.js';\n\nfunction closeAsync(fd) {\n  return new Promise((resolve, reject) => {\n    fs.close(fd, err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nfunction openAsync(path, flags, mode = undefined) {\n  return new Promise((resolve, reject) => {\n    fs.open(path, flags, mode, (err, fd) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(fd);\n      }\n    });\n  });\n}\n\nfunction readAsync(...args) {\n  return new Promise((resolve, reject) => {\n    fs.read(...args, (err, bytesRead, buffer) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve({\n          bytesRead,\n          buffer\n        });\n      }\n    });\n  });\n}\n\nclass FileSource extends BaseSource {\n  constructor(path) {\n    super();\n    this.path = path;\n    this.openRequest = openAsync(path, 'r');\n  }\n\n  fetchSlice(slice) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // TODO: use `signal`\n      const fd = yield _this.openRequest;\n      const {\n        buffer\n      } = yield readAsync(fd, Buffer.alloc(slice.length), 0, slice.length, slice.offset);\n      return buffer.buffer;\n    })();\n  }\n\n  close() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const fd = yield _this2.openRequest;\n      yield closeAsync(fd);\n    })();\n  }\n\n}\n\nexport function makeFileSource(path) {\n  return new FileSource(path);\n}","map":{"version":3,"sources":["/Users/hazalsilayaprak/Projects/earthquake-app/node_modules/geotiff/dist-module/source/file.js"],"names":["fs","BaseSource","closeAsync","fd","Promise","resolve","reject","close","err","openAsync","path","flags","mode","undefined","open","readAsync","args","read","bytesRead","buffer","FileSource","constructor","openRequest","fetchSlice","slice","Buffer","alloc","length","offset","makeFileSource"],"mappings":";AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,SAASC,UAAT,QAA2B,iBAA3B;;AAEA,SAASC,UAAT,CAAoBC,EAApB,EAAwB;AACtB,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCN,IAAAA,EAAE,CAACO,KAAH,CAASJ,EAAT,EAAcK,GAAD,IAAS;AACpB,UAAIA,GAAJ,EAAS;AACPF,QAAAA,MAAM,CAACE,GAAD,CAAN;AACD,OAFD,MAEO;AACLH,QAAAA,OAAO;AACR;AACF,KAND;AAOD,GARM,CAAP;AASD;;AAED,SAASI,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,IAAI,GAAGC,SAAvC,EAAkD;AAChD,SAAO,IAAIT,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCN,IAAAA,EAAE,CAACc,IAAH,CAAQJ,IAAR,EAAcC,KAAd,EAAqBC,IAArB,EAA2B,CAACJ,GAAD,EAAML,EAAN,KAAa;AACtC,UAAIK,GAAJ,EAAS;AACPF,QAAAA,MAAM,CAACE,GAAD,CAAN;AACD,OAFD,MAEO;AACLH,QAAAA,OAAO,CAACF,EAAD,CAAP;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD;;AAED,SAASY,SAAT,CAAmB,GAAGC,IAAtB,EAA4B;AAC1B,SAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCN,IAAAA,EAAE,CAACiB,IAAH,CAAQ,GAAGD,IAAX,EAAiB,CAACR,GAAD,EAAMU,SAAN,EAAiBC,MAAjB,KAA4B;AAC3C,UAAIX,GAAJ,EAAS;AACPF,QAAAA,MAAM,CAACE,GAAD,CAAN;AACD,OAFD,MAEO;AACLH,QAAAA,OAAO,CAAC;AAAEa,UAAAA,SAAF;AAAaC,UAAAA;AAAb,SAAD,CAAP;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD;;AAED,MAAMC,UAAN,SAAyBnB,UAAzB,CAAoC;AAClCoB,EAAAA,WAAW,CAACX,IAAD,EAAO;AAChB;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKY,WAAL,GAAmBb,SAAS,CAACC,IAAD,EAAO,GAAP,CAA5B;AACD;;AAEKa,EAAAA,UAAU,CAACC,KAAD,EAAQ;AAAA;;AAAA;AACtB;AACA,YAAMrB,EAAE,SAAS,KAAI,CAACmB,WAAtB;AACA,YAAM;AAAEH,QAAAA;AAAF,gBAAmBJ,SAAS,CAChCZ,EADgC,EAEhCsB,MAAM,CAACC,KAAP,CAAaF,KAAK,CAACG,MAAnB,CAFgC,EAGhC,CAHgC,EAIhCH,KAAK,CAACG,MAJ0B,EAKhCH,KAAK,CAACI,MAL0B,CAAlC;AAOA,aAAOT,MAAM,CAACA,MAAd;AAVsB;AAWvB;;AAEKZ,EAAAA,KAAK,GAAG;AAAA;;AAAA;AACZ,YAAMJ,EAAE,SAAS,MAAI,CAACmB,WAAtB;AACA,YAAMpB,UAAU,CAACC,EAAD,CAAhB;AAFY;AAGb;;AAvBiC;;AA0BpC,OAAO,SAAS0B,cAAT,CAAwBnB,IAAxB,EAA8B;AACnC,SAAO,IAAIU,UAAJ,CAAeV,IAAf,CAAP;AACD","sourcesContent":["import fs from 'fs';\nimport { BaseSource } from './basesource.js';\n\nfunction closeAsync(fd) {\n  return new Promise((resolve, reject) => {\n    fs.close(fd, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nfunction openAsync(path, flags, mode = undefined) {\n  return new Promise((resolve, reject) => {\n    fs.open(path, flags, mode, (err, fd) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(fd);\n      }\n    });\n  });\n}\n\nfunction readAsync(...args) {\n  return new Promise((resolve, reject) => {\n    fs.read(...args, (err, bytesRead, buffer) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve({ bytesRead, buffer });\n      }\n    });\n  });\n}\n\nclass FileSource extends BaseSource {\n  constructor(path) {\n    super();\n    this.path = path;\n    this.openRequest = openAsync(path, 'r');\n  }\n\n  async fetchSlice(slice) {\n    // TODO: use `signal`\n    const fd = await this.openRequest;\n    const { buffer } = await readAsync(\n      fd,\n      Buffer.alloc(slice.length),\n      0,\n      slice.length,\n      slice.offset,\n    );\n    return buffer.buffer;\n  }\n\n  async close() {\n    const fd = await this.openRequest;\n    await closeAsync(fd);\n  }\n}\n\nexport function makeFileSource(path) {\n  return new FileSource(path);\n}\n"]},"metadata":{},"sourceType":"module"}