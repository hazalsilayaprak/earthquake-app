{"ast":null,"code":"/**\n * @module ol/source/UTFGrid\n */\nimport EventType from '../events/EventType.js';\nimport Tile from '../Tile.js';\nimport TileSource from './Tile.js';\nimport TileState from '../TileState.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { assert } from '../asserts.js';\nimport { createFromTemplates, nullTileUrlFunction } from '../tileurlfunction.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { getKeyZXY } from '../tilecoord.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\nimport { listenOnce } from '../events.js';\nimport { jsonp as requestJSONP } from '../net.js';\n/**\n * @typedef {Object} UTFGridJSON\n * @property {Array<string>} grid The grid.\n * @property {Array<string>} keys The keys.\n * @property {Object<string, Object>} [data] Optional data.\n */\n\nexport class CustomTile extends Tile {\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {import(\"../extent.js\").Extent} extent Extent of the tile.\n   * @param {boolean} preemptive Load the tile when visible (before it's needed).\n   * @param {boolean} jsonp Load the tile as a script.\n   */\n  constructor(tileCoord, state, src, extent, preemptive, jsonp) {\n    super(tileCoord, state);\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.src_ = src;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.extent_ = extent;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.preemptive_ = preemptive;\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n\n    this.grid_ = null;\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n\n    this.keys_ = null;\n    /**\n     * @private\n     * @type {Object<string, Object>|undefined}\n     */\n\n    this.data_ = null;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.jsonp_ = jsonp;\n  }\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLImageElement} Image.\n   */\n\n\n  getImage() {\n    return null;\n  }\n  /**\n   * Synchronously returns data at given coordinate (if available).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {*} The data.\n   */\n\n\n  getData(coordinate) {\n    if (!this.grid_ || !this.keys_) {\n      return null;\n    }\n\n    const xRelative = (coordinate[0] - this.extent_[0]) / (this.extent_[2] - this.extent_[0]);\n    const yRelative = (coordinate[1] - this.extent_[1]) / (this.extent_[3] - this.extent_[1]);\n    const row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];\n\n    if (typeof row !== 'string') {\n      return null;\n    }\n\n    let code = row.charCodeAt(Math.floor(xRelative * row.length));\n\n    if (code >= 93) {\n      code--;\n    }\n\n    if (code >= 35) {\n      code--;\n    }\n\n    code -= 32;\n    let data = null;\n\n    if (code in this.keys_) {\n      const id = this.keys_[code];\n\n      if (this.data_ && id in this.data_) {\n        data = this.data_[id];\n      } else {\n        data = id;\n      }\n    }\n\n    return data;\n  }\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate (or `null` if not yet loaded).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   */\n\n\n  forDataAtCoordinate(coordinate, callback, request) {\n    if (this.state == TileState.EMPTY && request === true) {\n      this.state = TileState.IDLE;\n      listenOnce(this, EventType.CHANGE, function (e) {\n        callback(this.getData(coordinate));\n      }, this);\n      this.loadInternal_();\n    } else {\n      if (request === true) {\n        setTimeout(function () {\n          callback(this.getData(coordinate));\n        }.bind(this), 0);\n      } else {\n        callback(this.getData(coordinate));\n      }\n    }\n  }\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n\n\n  getKey() {\n    return this.src_;\n  }\n  /**\n   * @private\n   */\n\n\n  handleError_() {\n    this.state = TileState.ERROR;\n    this.changed();\n  }\n  /**\n   * @param {!UTFGridJSON} json UTFGrid data.\n   * @private\n   */\n\n\n  handleLoad_(json) {\n    this.grid_ = json['grid'];\n    this.keys_ = json['keys'];\n    this.data_ = json['data'];\n    this.state = TileState.LOADED;\n    this.changed();\n  }\n  /**\n   * @private\n   */\n\n\n  loadInternal_() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n\n      if (this.jsonp_) {\n        requestJSONP(this.src_, this.handleLoad_.bind(this), this.handleError_.bind(this));\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', this.src_);\n        client.send();\n      }\n    }\n  }\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n\n\n  onXHRLoad_(event) {\n    const client =\n    /** @type {XMLHttpRequest} */\n    event.target; // status will be 0 for file:// urls\n\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      let response;\n\n      try {\n        response =\n        /** @type {!UTFGridJSON} */\n        JSON.parse(client.responseText);\n      } catch (err) {\n        this.handleError_();\n        return;\n      }\n\n      this.handleLoad_(response);\n    } else {\n      this.handleError_();\n    }\n  }\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n\n\n  onXHRError_(event) {\n    this.handleError_();\n  }\n  /**\n   */\n\n\n  load() {\n    if (this.preemptive_) {\n      this.loadInternal_();\n    } else {\n      this.setState(TileState.EMPTY);\n    }\n  }\n\n}\n/**\n * @typedef {Object} Options\n * @property {boolean} [preemptive=true]\n * If `true` the UTFGrid source loads the tiles based on their \"visibility\".\n * This improves the speed of response, but increases traffic.\n * Note that if set to `false` (lazy loading), you need to pass `true` as\n * `request` to the `forDataAtCoordinateAndResolution` method otherwise no\n * data will ever be loaded.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {import(\"./TileJSON.js\").Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {string} [url] TileJSON endpoint that provides the configuration for this source.\n * Request will be made through JSONP. If not provided, `tileJSON` must be configured.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for UTFGrid interaction data loaded from TileJSON format.\n * @api\n */\n\nclass UTFGrid extends TileSource {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super({\n      projection: getProjection('EPSG:3857'),\n      state: 'loading',\n      zDirection: options.zDirection\n    });\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.preemptive_ = options.preemptive !== undefined ? options.preemptive : true;\n    /**\n     * @private\n     * @type {!import(\"../Tile.js\").UrlFunction}\n     */\n\n    this.tileUrlFunction_ = nullTileUrlFunction;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.template_ = undefined;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.jsonp_ = options.jsonp || false;\n\n    if (options.url) {\n      if (this.jsonp_) {\n        requestJSONP(options.url, this.handleTileJSONResponse.bind(this), this.handleTileJSONError.bind(this));\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\n    }\n  }\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n\n\n  onXHRLoad_(event) {\n    const client =\n    /** @type {XMLHttpRequest} */\n    event.target; // status will be 0 for file:// urls\n\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      let response;\n\n      try {\n        response =\n        /** @type {import(\"./TileJSON.js\").Config} */\n        JSON.parse(client.responseText);\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n\n\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n  /**\n   * Return the template from TileJSON.\n   * @return {string|undefined} The template from TileJSON.\n   * @api\n   */\n\n\n  getTemplate() {\n    return this.template_;\n  }\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate and resolution (or `null` if not yet loaded or\n   * in case of an error).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   * @api\n   */\n\n\n  forDataAtCoordinateAndResolution(coordinate, resolution, callback, request) {\n    if (this.tileGrid) {\n      const z = this.tileGrid.getZForResolution(resolution, this.zDirection);\n      const tileCoord = this.tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const tile =\n      /** @type {!CustomTile} */\n      this.getTile(tileCoord[0], tileCoord[1], tileCoord[2], 1, this.getProjection());\n      tile.forDataAtCoordinate(coordinate, callback, request);\n    } else {\n      if (request === true) {\n        setTimeout(function () {\n          callback(null);\n        }, 0);\n      } else {\n        callback(null);\n      }\n    }\n  }\n  /**\n   * @protected\n   */\n\n\n  handleTileJSONError() {\n    this.setState('error');\n  }\n  /**\n   * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse\n   * @protected\n   * @param {import(\"./TileJSON.js\").Config} tileJSON Tile JSON.\n   */\n\n\n  handleTileJSONResponse(tileJSON) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n    const sourceProjection = this.getProjection();\n    let extent;\n\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(epsg4326Projection, sourceProjection);\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    const gridExtent = extentFromProjection(sourceProjection);\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: gridExtent,\n      maxZoom: maxZoom,\n      minZoom: minZoom\n    });\n    this.tileGrid = tileGrid;\n    this.template_ = tileJSON['template'];\n    const grids = tileJSON['grids'];\n\n    if (!grids) {\n      this.setState('error');\n      return;\n    }\n\n    this.tileUrlFunction_ = createFromTemplates(grids, tileGrid);\n\n    if (tileJSON['attribution'] !== undefined) {\n      const attributionExtent = extent !== undefined ? extent : gridExtent;\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n\n        return null;\n      });\n    }\n\n    this.setState('ready');\n  }\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!CustomTile} Tile.\n   */\n\n\n  getTile(z, x, y, pixelRatio, projection) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return this.tileCache.get(tileCoordKey);\n    } else {\n      const tileCoord = [z, x, y];\n      const urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n      const tileUrl = this.tileUrlFunction_(urlTileCoord, pixelRatio, projection);\n      const tile = new CustomTile(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.tileGrid.getTileCoordExtent(tileCoord), this.preemptive_, this.jsonp_);\n      this.tileCache.set(tileCoordKey, tile);\n      return tile;\n    }\n  }\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n\n\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n\n}\n\nexport default UTFGrid;","map":{"version":3,"sources":["/Users/hazalsilayaprak/Projects/earthquake-app/node_modules/ol/source/UTFGrid.js"],"names":["EventType","Tile","TileSource","TileState","applyTransform","intersects","assert","createFromTemplates","nullTileUrlFunction","createXYZ","extentFromProjection","getKeyZXY","get","getProjection","getTransformFromProjections","listenOnce","jsonp","requestJSONP","CustomTile","constructor","tileCoord","state","src","extent","preemptive","src_","extent_","preemptive_","grid_","keys_","data_","jsonp_","getImage","getData","coordinate","xRelative","yRelative","row","Math","floor","length","code","charCodeAt","data","id","forDataAtCoordinate","callback","request","EMPTY","IDLE","CHANGE","e","loadInternal_","setTimeout","bind","getKey","handleError_","ERROR","changed","handleLoad_","json","LOADED","LOADING","client","XMLHttpRequest","addEventListener","onXHRLoad_","onXHRError_","open","send","event","target","status","response","JSON","parse","responseText","err","load","setState","UTFGrid","options","projection","zDirection","undefined","tileUrlFunction_","template_","url","handleTileJSONResponse","handleTileJSONError","tileJSON","getTemplate","forDataAtCoordinateAndResolution","resolution","tileGrid","z","getZForResolution","getTileCoordForCoordAndZ","tile","getTile","epsg4326Projection","sourceProjection","transform","gridExtent","minZoom","maxZoom","grids","attributionExtent","setAttributions","frameState","x","y","pixelRatio","tileCoordKey","tileCache","containsKey","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","getTileCoordExtent","set","useTile"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/UTFGrid\n */\n\nimport EventType from '../events/EventType.js';\nimport Tile from '../Tile.js';\nimport TileSource from './Tile.js';\nimport TileState from '../TileState.js';\nimport {applyTransform, intersects} from '../extent.js';\nimport {assert} from '../asserts.js';\nimport {createFromTemplates, nullTileUrlFunction} from '../tileurlfunction.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport {listenOnce} from '../events.js';\nimport {jsonp as requestJSONP} from '../net.js';\n\n/**\n * @typedef {Object} UTFGridJSON\n * @property {Array<string>} grid The grid.\n * @property {Array<string>} keys The keys.\n * @property {Object<string, Object>} [data] Optional data.\n */\n\nexport class CustomTile extends Tile {\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {import(\"../extent.js\").Extent} extent Extent of the tile.\n   * @param {boolean} preemptive Load the tile when visible (before it's needed).\n   * @param {boolean} jsonp Load the tile as a script.\n   */\n  constructor(tileCoord, state, src, extent, preemptive, jsonp) {\n    super(tileCoord, state);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ = preemptive;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.grid_ = null;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.keys_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, Object>|undefined}\n     */\n    this.data_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = jsonp;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLImageElement} Image.\n   */\n  getImage() {\n    return null;\n  }\n\n  /**\n   * Synchronously returns data at given coordinate (if available).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {*} The data.\n   */\n  getData(coordinate) {\n    if (!this.grid_ || !this.keys_) {\n      return null;\n    }\n    const xRelative =\n      (coordinate[0] - this.extent_[0]) / (this.extent_[2] - this.extent_[0]);\n    const yRelative =\n      (coordinate[1] - this.extent_[1]) / (this.extent_[3] - this.extent_[1]);\n\n    const row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];\n\n    if (typeof row !== 'string') {\n      return null;\n    }\n\n    let code = row.charCodeAt(Math.floor(xRelative * row.length));\n    if (code >= 93) {\n      code--;\n    }\n    if (code >= 35) {\n      code--;\n    }\n    code -= 32;\n\n    let data = null;\n    if (code in this.keys_) {\n      const id = this.keys_[code];\n      if (this.data_ && id in this.data_) {\n        data = this.data_[id];\n      } else {\n        data = id;\n      }\n    }\n    return data;\n  }\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate (or `null` if not yet loaded).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   */\n  forDataAtCoordinate(coordinate, callback, request) {\n    if (this.state == TileState.EMPTY && request === true) {\n      this.state = TileState.IDLE;\n      listenOnce(\n        this,\n        EventType.CHANGE,\n        function (e) {\n          callback(this.getData(coordinate));\n        },\n        this\n      );\n      this.loadInternal_();\n    } else {\n      if (request === true) {\n        setTimeout(\n          function () {\n            callback(this.getData(coordinate));\n          }.bind(this),\n          0\n        );\n      } else {\n        callback(this.getData(coordinate));\n      }\n    }\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    return this.src_;\n  }\n\n  /**\n   * @private\n   */\n  handleError_() {\n    this.state = TileState.ERROR;\n    this.changed();\n  }\n\n  /**\n   * @param {!UTFGridJSON} json UTFGrid data.\n   * @private\n   */\n  handleLoad_(json) {\n    this.grid_ = json['grid'];\n    this.keys_ = json['keys'];\n    this.data_ = json['data'];\n\n    this.state = TileState.LOADED;\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  loadInternal_() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      if (this.jsonp_) {\n        requestJSONP(\n          this.src_,\n          this.handleLoad_.bind(this),\n          this.handleError_.bind(this)\n        );\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', this.src_);\n        client.send();\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {!UTFGridJSON} */ (\n          JSON.parse(client.responseText)\n        );\n      } catch (err) {\n        this.handleError_();\n        return;\n      }\n      this.handleLoad_(response);\n    } else {\n      this.handleError_();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleError_();\n  }\n\n  /**\n   */\n  load() {\n    if (this.preemptive_) {\n      this.loadInternal_();\n    } else {\n      this.setState(TileState.EMPTY);\n    }\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [preemptive=true]\n * If `true` the UTFGrid source loads the tiles based on their \"visibility\".\n * This improves the speed of response, but increases traffic.\n * Note that if set to `false` (lazy loading), you need to pass `true` as\n * `request` to the `forDataAtCoordinateAndResolution` method otherwise no\n * data will ever be loaded.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {import(\"./TileJSON.js\").Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {string} [url] TileJSON endpoint that provides the configuration for this source.\n * Request will be made through JSONP. If not provided, `tileJSON` must be configured.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for UTFGrid interaction data loaded from TileJSON format.\n * @api\n */\nclass UTFGrid extends TileSource {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super({\n      projection: getProjection('EPSG:3857'),\n      state: 'loading',\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ =\n      options.preemptive !== undefined ? options.preemptive : true;\n\n    /**\n     * @private\n     * @type {!import(\"../Tile.js\").UrlFunction}\n     */\n    this.tileUrlFunction_ = nullTileUrlFunction;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.template_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = options.jsonp || false;\n\n    if (options.url) {\n      if (this.jsonp_) {\n        requestJSONP(\n          options.url,\n          this.handleTileJSONResponse.bind(this),\n          this.handleTileJSONError.bind(this)\n        );\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {import(\"./TileJSON.js\").Config} */ (\n          JSON.parse(client.responseText)\n        );\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n\n  /**\n   * Return the template from TileJSON.\n   * @return {string|undefined} The template from TileJSON.\n   * @api\n   */\n  getTemplate() {\n    return this.template_;\n  }\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate and resolution (or `null` if not yet loaded or\n   * in case of an error).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   * @api\n   */\n  forDataAtCoordinateAndResolution(coordinate, resolution, callback, request) {\n    if (this.tileGrid) {\n      const z = this.tileGrid.getZForResolution(resolution, this.zDirection);\n      const tileCoord = this.tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const tile = /** @type {!CustomTile} */ (\n        this.getTile(\n          tileCoord[0],\n          tileCoord[1],\n          tileCoord[2],\n          1,\n          this.getProjection()\n        )\n      );\n      tile.forDataAtCoordinate(coordinate, callback, request);\n    } else {\n      if (request === true) {\n        setTimeout(function () {\n          callback(null);\n        }, 0);\n      } else {\n        callback(null);\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handleTileJSONError() {\n    this.setState('error');\n  }\n\n  /**\n   * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse\n   * @protected\n   * @param {import(\"./TileJSON.js\").Config} tileJSON Tile JSON.\n   */\n  handleTileJSONResponse(tileJSON) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n\n    const sourceProjection = this.getProjection();\n    let extent;\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(\n        epsg4326Projection,\n        sourceProjection\n      );\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    const gridExtent = extentFromProjection(sourceProjection);\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: gridExtent,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n    });\n    this.tileGrid = tileGrid;\n\n    this.template_ = tileJSON['template'];\n\n    const grids = tileJSON['grids'];\n    if (!grids) {\n      this.setState('error');\n      return;\n    }\n\n    this.tileUrlFunction_ = createFromTemplates(grids, tileGrid);\n\n    if (tileJSON['attribution'] !== undefined) {\n      const attributionExtent = extent !== undefined ? extent : gridExtent;\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n    }\n\n    this.setState('ready');\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!CustomTile} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return this.tileCache.get(tileCoordKey);\n    } else {\n      const tileCoord = [z, x, y];\n      const urlTileCoord = this.getTileCoordForTileUrlFunction(\n        tileCoord,\n        projection\n      );\n      const tileUrl = this.tileUrlFunction_(\n        urlTileCoord,\n        pixelRatio,\n        projection\n      );\n      const tile = new CustomTile(\n        tileCoord,\n        tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n        tileUrl !== undefined ? tileUrl : '',\n        this.tileGrid.getTileCoordExtent(tileCoord),\n        this.preemptive_,\n        this.jsonp_\n      );\n      this.tileCache.set(tileCoordKey, tile);\n      return tile;\n    }\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\n\nexport default UTFGrid;\n"]},"metadata":{},"sourceType":"module"}