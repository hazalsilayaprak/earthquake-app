{"ast":null,"code":"/**\n * @module ol/net\n */\nimport { getUid } from './util.js';\n/**\n * Simple JSONP helper. Supports error callbacks and a custom callback param.\n * The error callback will be called when no JSONP is executed after 10 seconds.\n *\n * @param {string} url Request url. A 'callback' query parameter will be\n *     appended.\n * @param {Function} callback Callback on success.\n * @param {Function} [errback] Callback on error.\n * @param {string} [callbackParam] Custom query parameter for the JSONP\n *     callback. Default is 'callback'.\n */\n\nexport function jsonp(url, callback, errback, callbackParam) {\n  const script = document.createElement('script');\n  const key = 'olc_' + getUid(callback);\n\n  function cleanup() {\n    delete window[key];\n    script.parentNode.removeChild(script);\n  }\n\n  script.async = true;\n  script.src = url + (url.includes('?') ? '&' : '?') + (callbackParam || 'callback') + '=' + key;\n  const timer = setTimeout(function () {\n    cleanup();\n\n    if (errback) {\n      errback();\n    }\n  }, 10000);\n\n  window[key] = function (data) {\n    clearTimeout(timer);\n    cleanup();\n    callback(data);\n  };\n\n  document.head.appendChild(script);\n}\nexport class ResponseError extends Error {\n  /**\n   * @param {XMLHttpRequest} response The XHR object.\n   */\n  constructor(response) {\n    const message = 'Unexpected response status: ' + response.status;\n    super(message);\n    /**\n     * @type {string}\n     */\n\n    this.name = 'ResponseError';\n    /**\n     * @type {XMLHttpRequest}\n     */\n\n    this.response = response;\n  }\n\n}\nexport class ClientError extends Error {\n  /**\n   * @param {XMLHttpRequest} client The XHR object.\n   */\n  constructor(client) {\n    super('Failed to issue request');\n    /**\n     * @type {string}\n     */\n\n    this.name = 'ClientError';\n    /**\n     * @type {XMLHttpRequest}\n     */\n\n    this.client = client;\n  }\n\n}\n/**\n * @param {string} url The URL.\n * @return {Promise<Object>} A promise that resolves to the JSON response.\n */\n\nexport function getJSON(url) {\n  return new Promise(function (resolve, reject) {\n    /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The load event.\n     */\n    function onLoad(event) {\n      const client = event.target; // status will be 0 for file:// urls\n\n      if (!client.status || client.status >= 200 && client.status < 300) {\n        let data;\n\n        try {\n          data = JSON.parse(client.responseText);\n        } catch (err) {\n          const message = 'Error parsing response text as JSON: ' + err.message;\n          reject(new Error(message));\n          return;\n        }\n\n        resolve(data);\n        return;\n      }\n\n      reject(new ResponseError(client));\n    }\n    /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The error event.\n     */\n\n\n    function onError(event) {\n      reject(new ClientError(event.target));\n    }\n\n    const client = new XMLHttpRequest();\n    client.addEventListener('load', onLoad);\n    client.addEventListener('error', onError);\n    client.open('GET', url);\n    client.setRequestHeader('Accept', 'application/json');\n    client.send();\n  });\n}\n/**\n * @param {string} base The base URL.\n * @param {string} url The potentially relative URL.\n * @return {string} The full URL.\n */\n\nexport function resolveUrl(base, url) {\n  if (url.includes('://')) {\n    return url;\n  }\n\n  return new URL(url, base).href;\n}\nlet originalXHR;\nexport function overrideXHR(xhr) {\n  if (typeof XMLHttpRequest !== 'undefined') {\n    originalXHR = XMLHttpRequest;\n  }\n\n  global.XMLHttpRequest = xhr;\n}\nexport function restoreXHR() {\n  global.XMLHttpRequest = originalXHR;\n}","map":{"version":3,"sources":["/Users/hazalsilayaprak/Projects/earthquake-app/node_modules/ol/net.js"],"names":["getUid","jsonp","url","callback","errback","callbackParam","script","document","createElement","key","cleanup","window","parentNode","removeChild","async","src","includes","timer","setTimeout","data","clearTimeout","head","appendChild","ResponseError","Error","constructor","response","message","status","name","ClientError","client","getJSON","Promise","resolve","reject","onLoad","event","target","JSON","parse","responseText","err","onError","XMLHttpRequest","addEventListener","open","setRequestHeader","send","resolveUrl","base","URL","href","originalXHR","overrideXHR","xhr","global","restoreXHR"],"mappings":"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","sourcesContent":["/**\n * @module ol/net\n */\nimport {getUid} from './util.js';\n\n/**\n * Simple JSONP helper. Supports error callbacks and a custom callback param.\n * The error callback will be called when no JSONP is executed after 10 seconds.\n *\n * @param {string} url Request url. A 'callback' query parameter will be\n *     appended.\n * @param {Function} callback Callback on success.\n * @param {Function} [errback] Callback on error.\n * @param {string} [callbackParam] Custom query parameter for the JSONP\n *     callback. Default is 'callback'.\n */\nexport function jsonp(url, callback, errback, callbackParam) {\n  const script = document.createElement('script');\n  const key = 'olc_' + getUid(callback);\n  function cleanup() {\n    delete window[key];\n    script.parentNode.removeChild(script);\n  }\n  script.async = true;\n  script.src =\n    url +\n    (url.includes('?') ? '&' : '?') +\n    (callbackParam || 'callback') +\n    '=' +\n    key;\n  const timer = setTimeout(function () {\n    cleanup();\n    if (errback) {\n      errback();\n    }\n  }, 10000);\n  window[key] = function (data) {\n    clearTimeout(timer);\n    cleanup();\n    callback(data);\n  };\n  document.head.appendChild(script);\n}\n\nexport class ResponseError extends Error {\n  /**\n   * @param {XMLHttpRequest} response The XHR object.\n   */\n  constructor(response) {\n    const message = 'Unexpected response status: ' + response.status;\n    super(message);\n\n    /**\n     * @type {string}\n     */\n    this.name = 'ResponseError';\n\n    /**\n     * @type {XMLHttpRequest}\n     */\n    this.response = response;\n  }\n}\n\nexport class ClientError extends Error {\n  /**\n   * @param {XMLHttpRequest} client The XHR object.\n   */\n  constructor(client) {\n    super('Failed to issue request');\n\n    /**\n     * @type {string}\n     */\n    this.name = 'ClientError';\n\n    /**\n     * @type {XMLHttpRequest}\n     */\n    this.client = client;\n  }\n}\n\n/**\n * @param {string} url The URL.\n * @return {Promise<Object>} A promise that resolves to the JSON response.\n */\nexport function getJSON(url) {\n  return new Promise(function (resolve, reject) {\n    /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The load event.\n     */\n    function onLoad(event) {\n      const client = event.target;\n      // status will be 0 for file:// urls\n      if (!client.status || (client.status >= 200 && client.status < 300)) {\n        let data;\n        try {\n          data = JSON.parse(client.responseText);\n        } catch (err) {\n          const message = 'Error parsing response text as JSON: ' + err.message;\n          reject(new Error(message));\n          return;\n        }\n        resolve(data);\n        return;\n      }\n\n      reject(new ResponseError(client));\n    }\n\n    /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The error event.\n     */\n    function onError(event) {\n      reject(new ClientError(event.target));\n    }\n\n    const client = new XMLHttpRequest();\n    client.addEventListener('load', onLoad);\n    client.addEventListener('error', onError);\n    client.open('GET', url);\n    client.setRequestHeader('Accept', 'application/json');\n    client.send();\n  });\n}\n\n/**\n * @param {string} base The base URL.\n * @param {string} url The potentially relative URL.\n * @return {string} The full URL.\n */\nexport function resolveUrl(base, url) {\n  if (url.includes('://')) {\n    return url;\n  }\n  return new URL(url, base).href;\n}\n\nlet originalXHR;\nexport function overrideXHR(xhr) {\n  if (typeof XMLHttpRequest !== 'undefined') {\n    originalXHR = XMLHttpRequest;\n  }\n  global.XMLHttpRequest = xhr;\n}\n\nexport function restoreXHR() {\n  global.XMLHttpRequest = originalXHR;\n}\n"]},"metadata":{},"sourceType":"module"}