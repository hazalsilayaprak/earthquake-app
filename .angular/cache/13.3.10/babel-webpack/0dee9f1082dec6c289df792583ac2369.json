{"ast":null,"code":"import _asyncToGenerator from \"/Users/hazalsilayaprak/Projects/earthquake-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * @typedef Slice\n * @property {number} offset\n * @property {number} length\n */\nexport class BaseSource {\n  /**\n   *\n   * @param {Slice[]} slices\n   * @returns {ArrayBuffer[]}\n   */\n  fetch(slices, signal = undefined) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return Promise.all(slices.map(slice => _this.fetchSlice(slice, signal)));\n    })();\n  }\n  /**\n   *\n   * @param {Slice} slice\n   * @returns {ArrayBuffer}\n   */\n\n\n  fetchSlice(slice) {\n    return _asyncToGenerator(function* () {\n      throw new Error(`fetching of slice ${slice} not possible, not implemented`);\n    })();\n  }\n  /**\n   * Returns the filesize if already determined and null otherwise\n   */\n\n\n  get fileSize() {\n    return null;\n  }\n\n  close() {// no-op by default\n\n    return _asyncToGenerator(function* () {})();\n  }\n\n}","map":{"version":3,"sources":["/Users/hazalsilayaprak/Projects/earthquake-app/node_modules/geotiff/dist-module/source/basesource.js"],"names":["BaseSource","fetch","slices","signal","undefined","Promise","all","map","slice","fetchSlice","Error","fileSize","close"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMA,UAAN,CAAiB;AACtB;AACF;AACA;AACA;AACA;AACQC,EAAAA,KAAK,CAACC,MAAD,EAASC,MAAM,GAAGC,SAAlB,EAA6B;AAAA;;AAAA;AACtC,aAAOC,OAAO,CAACC,GAAR,CACLJ,MAAM,CAACK,GAAP,CAAYC,KAAD,IAAW,KAAI,CAACC,UAAL,CAAgBD,KAAhB,EAAuBL,MAAvB,CAAtB,CADK,CAAP;AADsC;AAIvC;AAED;AACF;AACA;AACA;AACA;;;AACQM,EAAAA,UAAU,CAACD,KAAD,EAAQ;AAAA;AACtB,YAAM,IAAIE,KAAJ,CAAW,qBAAoBF,KAAM,gCAArC,CAAN;AADsB;AAEvB;AAED;AACF;AACA;;;AACc,MAARG,QAAQ,GAAG;AACb,WAAO,IAAP;AACD;;AAEKC,EAAAA,KAAK,GAAG,CACZ;;AADY;AAEb;;AA9BqB","sourcesContent":["/**\n * @typedef Slice\n * @property {number} offset\n * @property {number} length\n */\n\nexport class BaseSource {\n  /**\n   *\n   * @param {Slice[]} slices\n   * @returns {ArrayBuffer[]}\n   */\n  async fetch(slices, signal = undefined) {\n    return Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  /**\n   *\n   * @param {Slice} slice\n   * @returns {ArrayBuffer}\n   */\n  async fetchSlice(slice) {\n    throw new Error(`fetching of slice ${slice} not possible, not implemented`);\n  }\n\n  /**\n   * Returns the filesize if already determined and null otherwise\n   */\n  get fileSize() {\n    return null;\n  }\n\n  async close() {\n    // no-op by default\n  }\n}\n"]},"metadata":{},"sourceType":"module"}