{"ast":null,"code":"/**\n * @module ol/ImageCanvas\n */\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error=): void): void} Loader\n */\n\nclass ImageCanvas extends ImageBase {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {HTMLCanvasElement} canvas Canvas.\n   * @param {Loader} [loader] Optional loader function to\n   *     support asynchronous canvas drawing.\n   */\n  constructor(extent, resolution, pixelRatio, canvas, loader) {\n    const state = loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n    super(extent, resolution, pixelRatio, state);\n    /**\n     * Optional canvas loader function.\n     * @type {?Loader}\n     * @private\n     */\n\n    this.loader_ = loader !== undefined ? loader : null;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    this.canvas_ = canvas;\n    /**\n     * @private\n     * @type {?Error}\n     */\n\n    this.error_ = null;\n  }\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {?Error} Any error that occurred during rendering.\n   */\n\n\n  getError() {\n    return this.error_;\n  }\n  /**\n   * Handle async drawing complete.\n   * @param {Error} [err] Any error during drawing.\n   * @private\n   */\n\n\n  handleLoad_(err) {\n    if (err) {\n      this.error_ = err;\n      this.state = ImageState.ERROR;\n    } else {\n      this.state = ImageState.LOADED;\n    }\n\n    this.changed();\n  }\n  /**\n   * Load not yet loaded URI.\n   */\n\n\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.loader_(this.handleLoad_.bind(this));\n    }\n  }\n  /**\n   * @return {HTMLCanvasElement} Canvas element.\n   */\n\n\n  getImage() {\n    return this.canvas_;\n  }\n\n}\n\nexport default ImageCanvas;","map":{"version":3,"sources":["/Users/hazalsilayaprak/Projects/earthquake-app/node_modules/ol/ImageCanvas.js"],"names":["ImageBase","ImageState","ImageCanvas","constructor","extent","resolution","pixelRatio","canvas","loader","state","undefined","IDLE","LOADED","loader_","canvas_","error_","getError","handleLoad_","err","ERROR","changed","load","LOADING","bind","getImage"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAN,SAA0BF,SAA1B,CAAoC;AAClC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEG,EAAAA,WAAW,CAACC,MAAD,EAASC,UAAT,EAAqBC,UAArB,EAAiCC,MAAjC,EAAyCC,MAAzC,EAAiD;AAC1D,UAAMC,KAAK,GAAGD,MAAM,KAAKE,SAAX,GAAuBT,UAAU,CAACU,IAAlC,GAAyCV,UAAU,CAACW,MAAlE;AAEA,UAAMR,MAAN,EAAcC,UAAd,EAA0BC,UAA1B,EAAsCG,KAAtC;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKI,OAAL,GAAeL,MAAM,KAAKE,SAAX,GAAuBF,MAAvB,GAAgC,IAA/C;AAEA;AACJ;AACA;AACA;;AACI,SAAKM,OAAL,GAAeP,MAAf;AAEA;AACJ;AACA;AACA;;AACI,SAAKQ,MAAL,GAAc,IAAd;AACD;AAED;AACF;AACA;AACA;;;AACEC,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKD,MAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf,QAAIA,GAAJ,EAAS;AACP,WAAKH,MAAL,GAAcG,GAAd;AACA,WAAKT,KAAL,GAAaR,UAAU,CAACkB,KAAxB;AACD,KAHD,MAGO;AACL,WAAKV,KAAL,GAAaR,UAAU,CAACW,MAAxB;AACD;;AACD,SAAKQ,OAAL;AACD;AAED;AACF;AACA;;;AACEC,EAAAA,IAAI,GAAG;AACL,QAAI,KAAKZ,KAAL,IAAcR,UAAU,CAACU,IAA7B,EAAmC;AACjC,WAAKF,KAAL,GAAaR,UAAU,CAACqB,OAAxB;AACA,WAAKF,OAAL;AACA,WAAKP,OAAL,CAAa,KAAKI,WAAL,CAAiBM,IAAjB,CAAsB,IAAtB,CAAb;AACD;AACF;AAED;AACF;AACA;;;AACEC,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKV,OAAZ;AACD;;AAzEiC;;AA4EpC,eAAeZ,WAAf","sourcesContent":["/**\n * @module ol/ImageCanvas\n */\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\n\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error=): void): void} Loader\n */\n\nclass ImageCanvas extends ImageBase {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {HTMLCanvasElement} canvas Canvas.\n   * @param {Loader} [loader] Optional loader function to\n   *     support asynchronous canvas drawing.\n   */\n  constructor(extent, resolution, pixelRatio, canvas, loader) {\n    const state = loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    super(extent, resolution, pixelRatio, state);\n\n    /**\n     * Optional canvas loader function.\n     * @type {?Loader}\n     * @private\n     */\n    this.loader_ = loader !== undefined ? loader : null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = canvas;\n\n    /**\n     * @private\n     * @type {?Error}\n     */\n    this.error_ = null;\n  }\n\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {?Error} Any error that occurred during rendering.\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Handle async drawing complete.\n   * @param {Error} [err] Any error during drawing.\n   * @private\n   */\n  handleLoad_(err) {\n    if (err) {\n      this.error_ = err;\n      this.state = ImageState.ERROR;\n    } else {\n      this.state = ImageState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.loader_(this.handleLoad_.bind(this));\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas element.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n}\n\nexport default ImageCanvas;\n"]},"metadata":{},"sourceType":"module"}