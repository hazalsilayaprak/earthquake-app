{"ast":null,"code":"import _asyncToGenerator from \"/Users/hazalsilayaprak/Projects/earthquake-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { applyPredictor } from '../predictor.js';\nexport default class BaseDecoder {\n  decode(fileDirectory, buffer) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const decoded = yield _this.decodeBlock(buffer);\n      const predictor = fileDirectory.Predictor || 1;\n\n      if (predictor !== 1) {\n        const isTiled = !fileDirectory.StripOffsets;\n        const tileWidth = isTiled ? fileDirectory.TileWidth : fileDirectory.ImageWidth;\n        const tileHeight = isTiled ? fileDirectory.TileLength : fileDirectory.RowsPerStrip || fileDirectory.ImageLength;\n        return applyPredictor(decoded, predictor, tileWidth, tileHeight, fileDirectory.BitsPerSample, fileDirectory.PlanarConfiguration);\n      }\n\n      return decoded;\n    })();\n  }\n\n}","map":{"version":3,"sources":["/Users/hazalsilayaprak/Projects/earthquake-app/node_modules/geotiff/dist-module/compression/basedecoder.js"],"names":["applyPredictor","BaseDecoder","decode","fileDirectory","buffer","decoded","decodeBlock","predictor","Predictor","isTiled","StripOffsets","tileWidth","TileWidth","ImageWidth","tileHeight","TileLength","RowsPerStrip","ImageLength","BitsPerSample","PlanarConfiguration"],"mappings":";AAAA,SAASA,cAAT,QAA+B,iBAA/B;AAEA,eAAe,MAAMC,WAAN,CAAkB;AACzBC,EAAAA,MAAM,CAACC,aAAD,EAAgBC,MAAhB,EAAwB;AAAA;;AAAA;AAClC,YAAMC,OAAO,SAAS,KAAI,CAACC,WAAL,CAAiBF,MAAjB,CAAtB;AACA,YAAMG,SAAS,GAAGJ,aAAa,CAACK,SAAd,IAA2B,CAA7C;;AACA,UAAID,SAAS,KAAK,CAAlB,EAAqB;AACnB,cAAME,OAAO,GAAG,CAACN,aAAa,CAACO,YAA/B;AACA,cAAMC,SAAS,GAAGF,OAAO,GAAGN,aAAa,CAACS,SAAjB,GAA6BT,aAAa,CAACU,UAApE;AACA,cAAMC,UAAU,GAAGL,OAAO,GAAGN,aAAa,CAACY,UAAjB,GACxBZ,aAAa,CAACa,YAAd,IAA8Bb,aAAa,CAACc,WAD9C;AAGA,eAAOjB,cAAc,CACnBK,OADmB,EACVE,SADU,EACCI,SADD,EACYG,UADZ,EACwBX,aAAa,CAACe,aADtC,EAEnBf,aAAa,CAACgB,mBAFK,CAArB;AAID;;AACD,aAAOd,OAAP;AAdkC;AAenC;;AAhB8B","sourcesContent":["import { applyPredictor } from '../predictor.js';\n\nexport default class BaseDecoder {\n  async decode(fileDirectory, buffer) {\n    const decoded = await this.decodeBlock(buffer);\n    const predictor = fileDirectory.Predictor || 1;\n    if (predictor !== 1) {\n      const isTiled = !fileDirectory.StripOffsets;\n      const tileWidth = isTiled ? fileDirectory.TileWidth : fileDirectory.ImageWidth;\n      const tileHeight = isTiled ? fileDirectory.TileLength : (\n        fileDirectory.RowsPerStrip || fileDirectory.ImageLength\n      );\n      return applyPredictor(\n        decoded, predictor, tileWidth, tileHeight, fileDirectory.BitsPerSample,\n        fileDirectory.PlanarConfiguration,\n      );\n    }\n    return decoded;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}