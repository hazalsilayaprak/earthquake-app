{"ast":null,"code":"import _asyncToGenerator from \"/Users/hazalsilayaprak/Projects/earthquake-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport * as FileSaver from \"file-saver\";\nimport Map from \"ol/Map\";\nimport View from \"ol/View\";\nimport TileLayer from \"ol/layer/Tile\";\nimport OSM from \"ol/source/OSM\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\";\nimport { fromLonLat } from \"ol/proj\";\nimport { Vector as VectorSource } from \"ol/source\";\nimport { Vector as VectorLayer } from \"ol/layer\";\nlet AppComponent = class AppComponent {\n  constructor() {\n    this.first = 0;\n    this.rows = 10;\n    this.searchText = \"\";\n    this.minDepth = 0;\n    this.maxDepth = 0;\n    this.minMagnitude = 0;\n    this.maxMagnitude = 0;\n    this.eventId = 0;\n    this.limit = 0; // async getTableData() {\n    //   let api =\n    //     \"https://deprem.afad.gov.tr/apiv2/event/filter?start=2021-02-14%2010:00:00&end=2022-09-16%2010:00:00\";\n    //   const response = await fetch(api);\n    //   const data = await response.json();\n    //   this.tableData = data;\n    //   this.generateEarthquakeMap();\n    // }\n  }\n\n  ngOnInit() {// this.getTableData();\n  }\n\n  submit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let api = `https://deprem.afad.gov.tr/apiv2/event/filter?start=${_this.startDate}&end=${_this.endDate}&minmag=${_this.minMagnitude}&maxmag=${_this.maxMagnitude}&mindepth=${_this.minDepth}&maxdepth=${_this.maxDepth}&eventid=${_this.eventId}&limit=${_this.limit}`;\n      const response = yield fetch(api);\n      const data = yield response.json();\n      _this.tableData = data;\n\n      _this.generateEarthquakeMap();\n\n      console.log(\"submitttt !!!\", _this.minMagnitude);\n    })();\n  }\n\n  next() {\n    this.first = this.first + this.rows;\n  }\n\n  prev() {\n    this.first = this.first - this.rows;\n  }\n\n  reset() {\n    this.first = 0;\n  }\n\n  isLastPage() {\n    return this.tableData ? this.first === this.tableData.length - this.rows : true;\n  }\n\n  isFirstPage() {\n    return this.tableData ? this.first === 0 : true;\n  }\n\n  get searchTable() {\n    var _a;\n\n    return (_a = this.tableData) === null || _a === void 0 ? void 0 : _a.filter(element => {\n      var _a;\n\n      return element.location.toLowerCase().includes((_a = this.searchText) === null || _a === void 0 ? void 0 : _a.toLowerCase());\n    });\n  } // exportPdf() {\n  //   import(\"jspdf\").then((jsPDF) => {\n  //     import(\"jspdf-autotable\").then((x) => {\n  //       const doc = new jsPDF.default(0, 0);\n  //       doc.autoTable(this.exportColumns, this.tableData);\n  //       doc.save(\"tableData.pdf\");\n  //     });\n  //   });\n  // }\n\n\n  exportExcel() {\n    import(\"xlsx\").then(xlsx => {\n      const mappedTable = this.searchTable.map(item => ({\n        date: item.date,\n        latitude: item.latitude,\n        longitude: item.longitude,\n        depth: item.depth,\n        type: item.type,\n        magnitude: item.magnitude,\n        location: item.location,\n        eventId: item.eventID\n      }));\n      const worksheet = xlsx.utils.json_to_sheet(mappedTable);\n      const workbook = {\n        Sheets: {\n          data: worksheet\n        },\n        SheetNames: [\"data\"]\n      };\n      const excelBuffer = xlsx.write(workbook, {\n        bookType: \"xlsx\",\n        type: \"array\"\n      });\n      this.saveAsExcelFile(excelBuffer, \"tableData\");\n    });\n  }\n\n  saveAsExcelFile(buffer, fileName) {\n    let EXCEL_TYPE = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    let EXCEL_EXTENSION = \".xlsx\";\n    const data = new Blob([buffer], {\n      type: EXCEL_TYPE\n    });\n    FileSaver.saveAs(data, fileName + \"_export_\" + new Date().getTime() + EXCEL_EXTENSION);\n  }\n\n  generateEarthquakeMap() {\n    var _a;\n\n    const features = [];\n    (_a = this.tableData) === null || _a === void 0 ? void 0 : _a.forEach(quake => {\n      features.push(new Feature(new Point(fromLonLat([quake.longitude, quake.latitude]))));\n    });\n    const source = new VectorSource({\n      features: features\n    });\n    const vectorLayer = new VectorLayer({\n      source: source\n    });\n    this.map = new Map({\n      view: new View({\n        center: [0, 0]\n        /* Coordinates */\n        ,\n        zoom: 2\n      }),\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer],\n      target: \"ol-map\"\n    });\n  }\n\n};\nAppComponent = __decorate([Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.scss\"]\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"sources":["/Users/hazalsilayaprak/Projects/earthquake-app/src/app/app.component.ts"],"names":["__decorate","Component","FileSaver","Map","View","TileLayer","OSM","Feature","Point","fromLonLat","Vector","VectorSource","VectorLayer","AppComponent","constructor","first","rows","searchText","minDepth","maxDepth","minMagnitude","maxMagnitude","eventId","limit","ngOnInit","submit","api","startDate","endDate","response","fetch","data","json","tableData","generateEarthquakeMap","console","log","next","prev","reset","isLastPage","length","isFirstPage","searchTable","_a","filter","element","location","toLowerCase","includes","exportExcel","then","xlsx","mappedTable","map","item","date","latitude","longitude","depth","type","magnitude","eventID","worksheet","utils","json_to_sheet","workbook","Sheets","SheetNames","excelBuffer","write","bookType","saveAsExcelFile","buffer","fileName","EXCEL_TYPE","EXCEL_EXTENSION","Blob","saveAs","Date","getTime","features","forEach","quake","push","source","vectorLayer","view","center","zoom","layers","target","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport * as FileSaver from \"file-saver\";\nimport Map from \"ol/Map\";\nimport View from \"ol/View\";\nimport TileLayer from \"ol/layer/Tile\";\nimport OSM from \"ol/source/OSM\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\";\nimport { fromLonLat } from \"ol/proj\";\nimport { Vector as VectorSource } from \"ol/source\";\nimport { Vector as VectorLayer } from \"ol/layer\";\nlet AppComponent = class AppComponent {\n    constructor() {\n        this.first = 0;\n        this.rows = 10;\n        this.searchText = \"\";\n        this.minDepth = 0;\n        this.maxDepth = 0;\n        this.minMagnitude = 0;\n        this.maxMagnitude = 0;\n        this.eventId = 0;\n        this.limit = 0;\n        // async getTableData() {\n        //   let api =\n        //     \"https://deprem.afad.gov.tr/apiv2/event/filter?start=2021-02-14%2010:00:00&end=2022-09-16%2010:00:00\";\n        //   const response = await fetch(api);\n        //   const data = await response.json();\n        //   this.tableData = data;\n        //   this.generateEarthquakeMap();\n        // }\n    }\n    ngOnInit() {\n        // this.getTableData();\n    }\n    async submit() {\n        let api = `https://deprem.afad.gov.tr/apiv2/event/filter?start=${this.startDate}&end=${this.endDate}&minmag=${this.minMagnitude}&maxmag=${this.maxMagnitude}&mindepth=${this.minDepth}&maxdepth=${this.maxDepth}&eventid=${this.eventId}&limit=${this.limit}`;\n        const response = await fetch(api);\n        const data = await response.json();\n        this.tableData = data;\n        this.generateEarthquakeMap();\n        console.log(\"submitttt !!!\", this.minMagnitude);\n    }\n    next() {\n        this.first = this.first + this.rows;\n    }\n    prev() {\n        this.first = this.first - this.rows;\n    }\n    reset() {\n        this.first = 0;\n    }\n    isLastPage() {\n        return this.tableData\n            ? this.first === this.tableData.length - this.rows\n            : true;\n    }\n    isFirstPage() {\n        return this.tableData ? this.first === 0 : true;\n    }\n    get searchTable() {\n        var _a;\n        return (_a = this.tableData) === null || _a === void 0 ? void 0 : _a.filter((element) => { var _a; return element.location.toLowerCase().includes((_a = this.searchText) === null || _a === void 0 ? void 0 : _a.toLowerCase()); });\n    }\n    // exportPdf() {\n    //   import(\"jspdf\").then((jsPDF) => {\n    //     import(\"jspdf-autotable\").then((x) => {\n    //       const doc = new jsPDF.default(0, 0);\n    //       doc.autoTable(this.exportColumns, this.tableData);\n    //       doc.save(\"tableData.pdf\");\n    //     });\n    //   });\n    // }\n    exportExcel() {\n        import(\"xlsx\").then((xlsx) => {\n            const mappedTable = this.searchTable.map((item) => ({\n                date: item.date,\n                latitude: item.latitude,\n                longitude: item.longitude,\n                depth: item.depth,\n                type: item.type,\n                magnitude: item.magnitude,\n                location: item.location,\n                eventId: item.eventID,\n            }));\n            const worksheet = xlsx.utils.json_to_sheet(mappedTable);\n            const workbook = { Sheets: { data: worksheet }, SheetNames: [\"data\"] };\n            const excelBuffer = xlsx.write(workbook, {\n                bookType: \"xlsx\",\n                type: \"array\",\n            });\n            this.saveAsExcelFile(excelBuffer, \"tableData\");\n        });\n    }\n    saveAsExcelFile(buffer, fileName) {\n        let EXCEL_TYPE = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n        let EXCEL_EXTENSION = \".xlsx\";\n        const data = new Blob([buffer], {\n            type: EXCEL_TYPE,\n        });\n        FileSaver.saveAs(data, fileName + \"_export_\" + new Date().getTime() + EXCEL_EXTENSION);\n    }\n    generateEarthquakeMap() {\n        var _a;\n        const features = [];\n        (_a = this.tableData) === null || _a === void 0 ? void 0 : _a.forEach((quake) => {\n            features.push(new Feature(new Point(fromLonLat([quake.longitude, quake.latitude]))));\n        });\n        const source = new VectorSource({ features: features });\n        const vectorLayer = new VectorLayer({ source: source });\n        this.map = new Map({\n            view: new View({\n                center: [0, 0] /* Coordinates */,\n                zoom: 2,\n            }),\n            layers: [\n                new TileLayer({\n                    source: new OSM(),\n                }),\n                vectorLayer,\n            ],\n            target: \"ol-map\",\n        });\n    }\n};\nAppComponent = __decorate([\n    Component({\n        selector: \"app-root\",\n        templateUrl: \"./app.component.html\",\n        styleUrls: [\"./app.component.scss\"],\n    })\n], AppComponent);\nexport { AppComponent };\n"]},"metadata":{},"sourceType":"module"}